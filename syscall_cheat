I/O FILE int open(const char *pathname, int flags, .../* mode_t mode */);  RETURNS: filedescriptor or -1(error) FLAGS: O_RDONLY,O_WRONLY,O_RDWR,O_CREAT,O_TRUNC,O_APPEND...   MODE:S_IRUSR,S_IWUSR,S_IRGRP,S_IWGRP,S_IROTH,S_IWOTH...#INCLUDES: <sys/stat.h> <fcntl.h>
I/O FILE int creat(const char *pathname, mode_t mode); RETURNS: filedescriptor or -1(error)  MODE:S_IRUSR,S_IWUSR,S_IRGRP,S_IWGRP,S_IROTH,S_IWOTH...#INCLUDES:<unistd.h>
I/O FILE ssize_t read(int fd, void *buffer,size_t count); RETURNS: nr of bytes read or 0(EOF) or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t write(int fd, const void *buffer, size_t count); RETURNS nr of bytes written or -1(error) #INCLUDES:<unistd.h>
I/O FILE int close(int fd); RETURNS 0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE off_t lseek(int fd, off_t offset, int whence); RETURNS:new offset or -1(error) WHENCE: SEEK_SET,SEEK_END,SEEK_CUR  #INCLUDES:<unistd.h>
I/O FILE int fcntl(int fd,int cmd,...); RETURNS:value dpnd on cmd or -1(error) CMD: F_GETFL,F_SETFL,F_DUPFD, FDUPFD_CLOEXEC #INCLUDES:<fcntl.h>
I/O FILE int dup(int oldfd); RETURNS:new fd or -1(error) #INCLUDES:<unistd.h>
I/O FILE int dup2(int oldfd,int newfd); RETURNS: newfd or -1(error) #INCLUDES:<unistd.h>
I/O FILE int dup3(int oldfd,int newfd,int flags); RETURNS: newfd or -1(error)
I/O FILE ssize_t pread(inf fd,void *buffer,size_t count,off_t offset); RETURNS: nr of bytes read or 0 on EOF or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t pwrite(int fd,const void *buffer,size_t count,off_t offset); RETURNS: nr of bytes written or 0 on EOF or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t readv(int fd,struct *iovec,int iovcnt); RETURNS:nr of bytes read or 0 (EOF) or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t writev(int fd,const struct *iovec,int iovcnt); RETURNS:nr of bytes written or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t preadv(int fd,struct *iovec,int iovcnt,off_t offset); RETURNS:nr of bytes or 0(EOF) or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t pwritev(int fd,const struct *iovec,int iovcnt,off_t offset); RETURNS:nr of bytes written or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE int truncate(const char *pathname,off_t length); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE int ftruncate(int fd,off_t length); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE int mkstemp(char *template); RETURNS: fd or -1(error) #INCLUDES:<stdlib.h>
PROCESS pid_t getpid(void); RETURNS:void #INCLUDES:<unistd.h>
PROCESS pid_t getppid(void) RETURNS:void #INCLUDES:<unistd.h>
PROCESS char *getenv(const char *name); RETURNS: pointer to value/string or NULL(no such var) #INCLUDES:<stdlib.h>
PROCESS extern char **environ; RETURNS: global variable -pointer to pointers to env. variables
PROCESS int putenv(char *string); RETURNS:0(success) or nonzero(error), string is name=value #INCLUDES:<stdlib.h>
PROCESS int setenv(const char *name,const char *value,int overwrite); RETURNS:0(success) or -1(error) #INCLUDES:<stdlib.h>
PROCESS int unsetenv(const char *name); RETURNS:0(succes) or -1(error) #INCLUDES:<stdlib.h>
PROCESS int clearenv(void); RETURNS:0(success) or nonzero(error), equal to environ=NULL; #INCLUDES:<stdlib.h>
PROCESS int setjmp(jmp_buf env); RETURNS:0 on initial call, nonzero on return via longjmp() #INCLUDES:<setjmp.h>
PROCESS void longjmp(jmp_buf env,int val); RETURNS:void returns to setjump with value val #INCLUDES:<setjmp.h>
MEMORY	int brk(void *end_data_segment); RETURNS:0(success) or -1(error) #INCLUDES:<unistd.h>
MEMORY void *sbrk(intptr_t increment); RETURNS:previous program break or (*void)-1 on error #INCLUDES:<unistd.h>
MEMORY void *malloc(size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY free(void *ptr); RETURNS:void #INCLUDES:<stdlib.h>
MEMORY void *calloc(size_t numitems,size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY void *realloc(void *ptr,size_t size); RETURNS:pointer to reallocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY void *memalign(size_t boundary,size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<malloc.h>
MEMORY int posix_memalign(void **memptr,size_t alignment,size_t size); RETURNS: 0(success) or errnum(error) #INCLUDES:<stdlib.h>
MEMORY void *alloca(size_t size); RETURNS:pointer to allocated memory on the stack #INCLUDES:<alloca.h>









