I/O FILE int open(const char *pathname, int flags, .../* mode_t mode */);  RETURNS: filedescriptor or -1(error) FLAGS: O_RDONLY,O_WRONLY,O_RDWR,O_CREAT,O_TRUNC,O_APPEND...   MODE:S_IRUSR,S_IWUSR,S_IRGRP,S_IWGRP,S_IROTH,S_IWOTH...#INCLUDES: <sys/stat.h> <fcntl.h>
I/O FILE int creat(const char *pathname, mode_t mode); RETURNS: filedescriptor or -1(error)  MODE:S_IRUSR,S_IWUSR,S_IRGRP,S_IWGRP,S_IROTH,S_IWOTH...#INCLUDES:<unistd.h>
I/O FILE ssize_t read(int fd, void *buffer,size_t count); RETURNS: nr of bytes read or 0(EOF) or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t write(int fd, const void *buffer, size_t count); RETURNS nr of bytes written or -1(error) #INCLUDES:<unistd.h>
I/O FILE int close(int fd); RETURNS 0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE off_t lseek(int fd, off_t offset, int whence); RETURNS:new offset or -1(error) WHENCE: SEEK_SET,SEEK_END,SEEK_CUR  #INCLUDES:<unistd.h>
I/O FILE int fcntl(int fd,int cmd,...); RETURNS:value dpnd on cmd or -1(error) CMD: F_GETFL,F_SETFL,F_DUPFD, FDUPFD_CLOEXEC #INCLUDES:<fcntl.h>
I/O FILE int dup(int oldfd); RETURNS:new fd or -1(error) #INCLUDES:<unistd.h>
I/O FILE int dup2(int oldfd,int newfd); RETURNS: newfd or -1(error) #INCLUDES:<unistd.h>
I/O FILE int dup3(int oldfd,int newfd,int flags); RETURNS: newfd or -1(error)
I/O FILE ssize_t pread(inf fd,void *buffer,size_t count,off_t offset); RETURNS: nr of bytes read or 0 on EOF or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t pwrite(int fd,const void *buffer,size_t count,off_t offset); RETURNS: nr of bytes written or 0 on EOF or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t readv(int fd,struct *iovec,int iovcnt); RETURNS:nr of bytes read or 0 (EOF) or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t writev(int fd,const struct *iovec,int iovcnt); RETURNS:nr of bytes written or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t preadv(int fd,struct *iovec,int iovcnt,off_t offset); RETURNS:nr of bytes or 0(EOF) or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t pwritev(int fd,const struct *iovec,int iovcnt,off_t offset); RETURNS:nr of bytes written or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE int truncate(const char *pathname,off_t length); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE int ftruncate(int fd,off_t length); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE int mkstemp(char *template); RETURNS: fd or -1(error) #INCLUDES:<stdlib.h>
PROCESS pid_t getpid(void); RETURNS:void #INCLUDES:<unistd.h>
PROCESS pid_t getppid(void) RETURNS:void #INCLUDES:<unistd.h>
PROCESS char *getenv(const char *name); RETURNS: pointer to value/string or NULL(no such var) #INCLUDES:<stdlib.h>
PROCESS extern char **environ; RETURNS: global variable -pointer to pointers to env. variables
PROCESS int putenv(char *string); RETURNS:0(success) or nonzero(error), string is name=value #INCLUDES:<stdlib.h>
PROCESS int setenv(const char *name,const char *value,int overwrite); RETURNS:0(success) or -1(error) #INCLUDES:<stdlib.h>
PROCESS int unsetenv(const char *name); RETURNS:0(succes) or -1(error) #INCLUDES:<stdlib.h>
PROCESS int clearenv(void); RETURNS:0(success) or nonzero(error), equal to environ=NULL; #INCLUDES:<stdlib.h>
PROCESS int setjmp(jmp_buf env); RETURNS:0 on initial call, nonzero on return via longjmp() #INCLUDES:<setjmp.h>
PROCESS void longjmp(jmp_buf env,int val); RETURNS:void returns to setjump with value val #INCLUDES:<setjmp.h>
MEMORY	int brk(void *end_data_segment); RETURNS:0(success) or -1(error) #INCLUDES:<unistd.h>
MEMORY void *sbrk(intptr_t increment); RETURNS:previous program break or (*void)-1 on error #INCLUDES:<unistd.h>
MEMORY void *malloc(size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY free(void *ptr); RETURNS:void #INCLUDES:<stdlib.h>
MEMORY void *calloc(size_t numitems,size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY void *realloc(void *ptr,size_t size); RETURNS:pointer to reallocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY void *memalign(size_t boundary,size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<malloc.h>
MEMORY int posix_memalign(void **memptr,size_t alignment,size_t size); RETURNS: 0(success) or errnum(error) #INCLUDES:<stdlib.h>
MEMORY void *alloca(size_t size); RETURNS:pointer to allocated memory on the stack #INCLUDES:<alloca.h>
USERS struct passwd *getpwname(const char *name); RETURNS:pointer to structure passwd[pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell] or NULL(error) #INCLUDES:<pwd.h>
USERS struct passwd *getpwuid(uid_t uid); RETURNS:pointer to structure passwdd[pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell] or NULL(error) #INCLUDES:<pwd.h>
USERS struct group *getgrnam(const char *name); RETURNS:pointer to struct group[gr_name,gr_passwd,gr_gid,**gr_mem] ot NULL(error) #INCLUDES:<grp.h>
USERS struct group *getgrgid(gid_t gid); RETURNS:pointer to struct group[gr_name,gr_passwd,gr_gid,**gr_mem] ot NULL(error) #INCLUDES:<grp.h>
USERS struct passwd *getpwent(void); RETURNS:pointer to structure passwd entry or NULL(error) #INCLUDES:<pwd.h>
USERS void setpwent(void); RETURNS:void -resets the entry point of getpwent() #INCLUDES:<pwd.h>
USERS void endpwent(void); RETURNS:void -ends the entry of getpwent()-closes down #INCLUDES:<pwd.h>
USERS struct group *getgrent(void); RETURNS:pointer to structure group entry or NULL(error) #INCLUDES:<grp.h>
USERS void setgrent(void); RETURNS:void -resets the entry point of getgrent() #INCLUDES:<grp.h>
USERS void endgrent(void); RETURNS:void -ends the entry of getgrent()-closes down #INCLUDES:<grp.h>
USERS struct spwd *getspnam(const char *name); RETURNS:pointer to structure spwd[sp_namp,sp_pwdp,sp_lstchg,sp_min,sp_max,sp_warn,sp_inact,sp_expire] #INCLUDES:<shadow.h>
USERS struct spwd *getspent(void); RETURNS:pointer to structure spwd entry or NULL(error) #INCLUDES:<shadow.h>
USERS void setspent(void); RETURNS:void -resets the entry point of getspent() #INCLUDES:<shadow.h>
USERS void endspent(void); RETURNS:void -ends the entry of getspent()-closes down #INCLUDES:<shadow.h>
USERS char *crypt(const char *key,const *char salt); RETURNS:pointer to encrtypted pwd or NULL(error) #INCLUDES:<unistd.h>
USERS char *getpass(const *char prompt); RETURNS:pointer to entered pwd or NULL(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT uid_t getuid(void); RETURNS:real user id of calling process #INCLUDES:<unistd.h>
PROCESS_CREDENT uid_t geteuid(void); RETURNS:effective user id of calling process#INCLUDES:<unistd.h>
PROCESS_CREDENT gid_t getgid(void); RETURNS:real group id of calling process #INCLUDES:<unistd.h>
PROCESS_CREDENT gid_t getegid(void); RETURNS: effective group id of a calling process #INCLUDES:<unistd.h>
PROCESS_CREDENT int setuid(uid_t uid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setgid(gid_t gid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int seteuid(uid_t euid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setegid(gid_t egid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setreuid(uid_t ruid,uid_t euid); RETURNS:0 on success or -1(error),args can be -1 for omit #INCLUDES:<unistd.h>
PROCESS_CREDENT int setregid(gid_t rgid,gid_t egid); RETURNS:0 on success or -1(error),args can be -1 for omit  #INCLUDES:<unistd.h>
PROCESS_CREDENT int getresuid(uid_t *ruid,uid_t *euid,uid_t *suid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int getresgid(gid_t *rgid,gid_t *egid,gid_t *sgid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setresuid(uid_t ruid,uid_t euid,uid_t suid); RETURNS:0 on success or -1(error),args can be -1 for omit  #INCLUDES:<unistd.h>
PROCESS_CREDENT int setresgid(gid_t rgid,gid_t egid,gid_t sgid); RETURNS:0 on success or -1(error),args can be -1 for omit  #INCLUDES:<unistd.h>
PROCESS_CREDENT int setfsuid(uid_t fsuid); RETURNS:previous fsuid #INCLUDES:<sys/fsuid.h>
PROCESS_CREDENT int setfsgid(gid_t fsgid); RETURNS:previous fsgid #INCLUDES:<sys/fsuid.h>
PROCESS_CREDENT int getgroups(int gidsetsize,gid_t grouplis[]); RETURNS: nr of group IDs placed in grouplist on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setgroups(size_t gidsetsize,const gid_t *grouplis); RETURNS:0 on success or -1(error) #INCLUDES:<grp.h>
PROCESS_CREDENT int initgroups(const char *user,gid_t group); RETURNS:0 on success or -1(error) #INCLUDES:<grp.h>
TIME int gettimeofday(struct timeval *tv,struct timezone *tz); RETURNS: 0 or -1(error) ,struct timeval:[time_t tv_sec(secs),suseconds_t tv_usec(micros)] #INCLUDES:<sys/time.h>
TIME time_t time(time_t *timep); RETURNS:number of seconds since Epoch or -1(error) ,usually use NULL as arg #INCLUDES:<time.h>
TIME char *ctime(const time_t *timep); RETURNS:pointer to string or NULL(error) #INCLUDES:<time.h>
TIME struct tm *gmtime(const time_t *timep); RETURNS:pointer to structure tm with broken down time attrs,struct tm:[tm_sec,tm_min,tm_hour,tm_mday,tm_mon,tm_year...etc] or NULL(error) #INCLUDES:<time.h>
TIME struct tm *localtime(const time_t *timep); RETURNS:pointer to structure tm with broken down time attrs or NULL(error) #INCLUDES:<time.h>
TIME time_t mktime(struct tm *timeptr); RETURNS: seconds since Epoch corr. to the struct in the attr or -1(error) #INCLUDES:<time.h>
TIME char *asctime(const struct tm *timeptr); RETURNS: pointer to preformatted string or NULL(error) #INCLUDES:<time.h>
TIME size_t strftime(char *outstr,size_t maxsize,const char *format,const struct tm *timeptr); RETURNS:nr of bytes placed in outstr or NULL(error) %c(all)%d(day)%F(ISO date)%m(month) %Y(YYYY)  #INCLUDES<time.h>
TIME char *strptime(const char *str,const char *format,struct tm *timeptr); RETURNS:ptr to next unprocessed char or NULL(error) #INCLUDES:<time.h>
TIME char *setlocale(int category,const char *locale); RETURNS:ptr to a string with new locale or NULL(error) #INCLUDES:<locale.h>
TIME int settimeoftheday(const struct timeval *tv,const struct timezone *tz); RETURNS: 0 or -1(error) #INCLUDES<sys/time.h>
TIME int adjtime(struct timeval *delta,struct timeval *olddelta); RETURNS:0 on success or -1(error) #INCLUDES:<sys/time.h>
TIME clock_t times(struct tms *buf); RETURNS:nr of clock ticks or -1(error),struct tms:[tms_utime,tms_stime,tms_cutime,tms_cstime] #INCLUDES:<sys/times.h>
TIME clock_t clock(void); RETURNS:total cpu time used by calling process or -1(error) #INCLUDES:<time.h>
SYSTEM long sysconf(int name); RETURNS value of limit or -1(error/indetermined) [_SC_ARG_MAX._SC_CLK_TCK,_SC_LOGIN_NAME_MAX,_SC_OPEN_MAX,_SC_NGROUPS_MAX,_SC_PAGE_SIZE,_SC_RTSIG_MAX,_SC_SIGQUEUE_MAX,_SC_STREAM_MAX] #INCLUDES:<unistd.h>
SYSTEM long pathconf(const char *pathname,int name); RETURNS:value of limit or -1(error/indetermined) [_PC_NAME_MAX,_PC_PATH_MAX,_PC_PIPE_BUF] #INCLUDES:<unistd.h>
SYSTEM long fpathconf(int fd,int name); RETURNS:value of limit or -1(error/indetermined) [_PC_NAME_MAX,_PC_PATH_MAX,_PC_PIPE_BUF]  #INCLUDES:<unistd.h>
SYSTEM int uname(struct utsname *utsbuf): RETURNS:0 or -1(error) struct[ chars *sysname,nodename,release,version,machine,domainname] #INCLUDES:<sys/utsname.h>
I/O FILE BUFFERING int setvbuf(FILE *stream,char *buf,int mode,size_t size); RETURNS: 0 or nonzero(error) mode[_IONBF,_IOLBF,_IOFBF]  #INCLUDES:<stdio.h>
I/O FILE BUFFERING void setbuf(FILE *stream,char *buf); RETURNS:void  #INCLUDES:<stdio.h>
I/O FILE BUFFERING void setbuffer(FILE *stream,char *buf,size_t size); RETURNS:void #INCLUDES:<stdio.h>
I/O FILE BUFFERING inf fflush(FILE *stream); RETURNS: 0 or EOF(error) #INCLUDES:<stdio.h>
I/O FILE BUFFERING int fsync(int fd); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE BUFFERING int fdatasync(int fd); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE BUFFERING void sync(void); RETURNS:void #INCLUDES:<unistd.h>
I/O FILE BUFFERING int posix_fadvise(int fd,off_t offset,off_t len,int advice); RETURNS:0 or positive nr(error) advice[POSIX_FADV_NORMAL,POSIX_FADV_SEQUENTIAL,POSIX_FADV_RANDOM,POSIX_FADV_WILLNEED,POSIX_FADV_DONTNEED,POSIX_FADV_NOREUSE] #INCLUDES:<fcntl.h>
I/O FILE BUFFERING int fileno(FILE *stream); RETURNS: fd or -1(error) #INCLUDES:<stdio.h>
I/O FILE BUFFERING FILE *fdopen(int fd,const char *mode); RETURNS:new file ptr or NULL(error) #INCLUDES:<stdio.h>
FILESYS int mount(const char *source,const char *target,const char *fstype, unsigned long mountflags,const void *data); RETURNS:0 or -1 mountflags[MS_BIND,MS_DIRSYNC,MS_MANDLOCK,MS_MOVE,MS_NOATIME,MS_NODEV,MS_NODRIRATIME,MS_NOEXEC,MS_NOSUID,MS_RDONLY,MS_REC,MS_RELATIME.MS_REMOUNT,MS_STRICTATIME,MS_SYNCHRONOUS] #INCLUDES:<sys/mount.h>
FILESYS int umount(const char *target); RETURNS:0 or -1(error) #INCLUDES:<sys/mount.h>
FILESYS int umount2(const char *target,int flags); RETURNS:0 or -1(error) flags[MNT_DETACH,MNT_EXPIRE,MNT_FORCE,UMOUNT_NOFOLLOW] #INCLUDES:<sys/mount.h>
FILESYS int statvfs(const char *pathname,struct statvfs *ststvsbuf); RETURNS:0 or -1(error) struct statvfs[ul f_bsize,ul f_frsize,fsblkcnt_t f_blocks,f_bfree,f_bavail,fsfilcnt f_files,f_ffree,f_avail,ul f_fsid,f_flag,f_namemax] #INCLUDES:<sys/statvfs.h>
FILESYS int fstatvfs(int fd,struct statvfs *statvfsbuf); RETURNS:0 or -1(error) struct statvfs[ul f_bsize,ul f_frsize,fsblkcnt_t f_blocks,f_bfree,f_bavail,fsfilcnt f_files,f_ffree,f_avail,ul f_fsid,f_flag,f_namemax] #INCLUDES:<sys/statvfs.h>
FILE ATTR int stat(const char *pathname,struct stat *statbuf); RETURNS:0 or -1(error) struct[st_dev,st_ino,st_mode,st_nlink,st_uid,st_gid,st_rdev,st_size,st_blksize,st_blocks,st_atime,st_mtime,st_ctime] mode[S_IFREG,S_IFDIR,S_IFCHR,S_IFBLK,S_IFIFO,S_IFSOCK,S_IFLNK] #INCLUDES:<sys/stat.h>

FILE ATTR int lstat(const char *pathname,struct stat statbuf); RETURNS:0 or -1(error) struct[st_dev,st_ino,st_mode,st_nlink,st_uid,st_gid,st_rdev,st_size,st_blksize,st_blocks,st_atime,st_mtime,st_ctime] #INCLUDES:<sys/stat.h>
FILE ATTR int fstat(int fd,struct stat *statbuf); RETURNS:0 or -1(error) struct[st_dev,st_ino,st_mode,st_nlink,st_uid,st_gid,st_rdev,st_size,st_blksize,st_blocks,st_atime,st_mtime,st_ctime #INCLUDES:<sys/stat.h>
FILE ATTR int utime(const char *pathname,const struct utimbuf *buf); RETURNS:0 or -1(error) utimbuf[actime,modtime] #INCLUDES:<utime.h>
FILE ATTR int utimes(const char *pathname,const struct timeval tv[2]); RETURNS:0 or -1(error) #INCLUDES:<sys/time.h>
FILE ATTR int futimes(int fd,const struct timeval tv[2]); RETURNS:0 or -1(error) #INCLUDES:<sys/time.h>
FILE ATTR int lutimes(const char *pathname,const struct timeval tv[2]); RETURNS:0 or -1(error) #INCLUDES:<sys/time.h>
FILE ATTR int utimensat(int dirfd,const char *pathname,const struct timespec times[2],int flags); RETURNS:0 or -1(error) struct timespec[tv_sec,tv_nsec] #INCLUDES:<sys/stat.h>
FILE ATTR int futimens(int fd,const struct timespec times[2]); RETURNS 0 or -1(error) struct timespec[tv_sec,tv_nsec] #INCLUDES:<sys/stat.h>
FILE ATTR int chown(const char *pathname,uid_t owner, gid_t group); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
FILE ATTR int lchown(const char *pathname,uid_t owner,gid_t group); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
FILE ATTR int fchown(int fd,uid_t owner,gid_t group); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
FILE ATTR int access(const char *pathname,int mode); RETURNS:0 if all granted,-1(otherwise) mode[F_OK,R_OK,W_OK,X_OK]  #INCLUDES:<unistd.h>
FILE ATTR mode_t umask(mode_t mask); RETURNS:previous mask #INCLUDES:<sys/stat.h>
FILE ATTR int chmod(const char *pathname,mode_t mode); RETURNS:0 or -1(error) mode[S_ISUID,S_ISGID,S_ISVTX,S_IRUSR,S_IWUSR,S_IXUSR,S_IRGRP,S_IWGRP,S_IXGRP,S_IROTH,S_IWOTH,S_IXOTH] #INCLUDES:<sys/stat.h>
FILE ATTR int fchmod(int fd,mode_t mode); RETURNS:0 or -1(error) mode[S_ISUID,S_ISGID,S_ISVTX,S_IRUSR,S_IWUSR,S_IXUSR,S_IRGRP,S_IWGRP,S_IXGRP,S_IROTH,S_IWOTH,S_IXOTH] #INCLUDES:<sys/stat.h>
FILE ATTR EXT int setxattr(const char *pathname,const char *name,const void *value,size_t size,int flags); RETURNS:0 or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT int lsetxattr(const char *pathname,const char *name,const void *value,size_t size,int flags); RETURNS:0 or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT int fsetxattr(int fd, const char *name,const void *value,size_t size,int flags); RETURNS:0 or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT ssize_t getxattr(const char *pathname,const char *name,void *value,size_t size); RETURNS:size of value or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT ssize_t lgetxattr(const char *pathname,const char *name,void *value,size_t size); RETURNS:size of value or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT ssize_t fgetxattr(int fd,const char *name,void *value,size_t size); RETURNS:size of value or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT int removexattr(const char *pathname,const char *name); RETURNS:0 or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT int lremovexattr(const char *pathname,const char *name); RETURNS:0 or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT int fremovexattr(int fd,const char *name); RETURNS:0 or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT ssize_t listxattr(const char *pathname,char *list,size_t size); RETURNS:nr of bytes copied into list or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT ssize_t llistxattr(const char *pathname,char *list,size_t size); RETURNS:nr of bytes copied into list or -1(error) #INCLUDES:<sys/xattr.h>
FILE ATTR EXT ssize_t flistxattr(int fd,char *list,size_t size); RETURNS:nr of bytes copied into list or -1(error) #INCLUDES:<sys/xattr.h>
DIRS int link(const char *oldpath,const char *newpath); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
DIRS int unlink(const char *pathname); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
DIRS int rename(const char *oldpath,const char *newpath); RETURNS:0 or -1(error) #INCLUDES:<stdio.h>
DIRS int symlink(const char *filepath,const char *linkpath); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
DIRS ssize_t readlink(const char *pathname,char *buffer,size_t bufsiz); RETURNS:nr bytes in buffer or -1(error) #INCLUDES:<unistd.h>
DIRS int mkdir(const char *pathname,mode_t mode); RETURNS:0 or -1(error) #INCLUDES:<sys/stat.h>
DIRS int rmdir(const char *pathname); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
DIRS int remove(const char *pathname); RETURNS:0 or -1(error) #INCLUDES:<stdio.h>
DIRS DIR *opendir(const char *dirpath); RETURNS:dir stream handle or NULL(error) #INCLUDES:<dirent.h>
DIRS DIR *fdopendir(int fd); RETURNS:dir stream handle or NULL(error) #INCLUDES:<dirent.h>
DIRS struct dirent *readdir(DIR *dirp); RETURNS:ptr to struct of next dir entry or NULL(error or end of entries) #INCLUDES:<dirent.h>
DIRS void rewinddir(DIR *dirp); RETURNS:void #INCLUDES:<dirent.h>
DIRS int closedir(DIR *dirp); RETURNS:0 or -1(error) #INCLUDES:<dirent.h>
DIRS int dirfd(DIR *dirp); RETURNS:fd or -1(error) #INCLUDES:<dirent.h>
DIRS int readdir_r(DIR *dirp,struct dirent *entry,struct dirent **result); RETURNS 0 or pos.num=errno(error) #INCLUDES:<dirent.h>
DIRS int ntfw(const char *dirpath,int (*func) (const char *pathname,const struct stat *statbuf,int typeflag,struct FTW *ftwbuf),int nopenfd,int flags); RETURNS:0 or -1(error) struct FTW[int base,int level] #INCLUDES:<ftw.h>
DIRS char *getcwd(char *cwdbuf,size_t size); RETURNS:cwdbuf or NULL(error) #INCLUDES:<unistd.h>
DIRS int chdir(const char *pathname); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
DIRS int fchdir(int fd); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
DIRS int openat(int dirfd,const char *pathname,int flags,.../*mode_t mode */); RETURNS:fd or -1(error) #INCLUDES:<fcntl.h>
DIRS int chroot(const char *pathname); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
DIRS char *realpath(const char *pathname,char *resolved_path); RETURNS:ptr to resolved path or NULL(error) #INCLUDES:<stdlib.h>
DIRS char *dirname(char *pathname); RETURNS:ptr to str #INCLUDES:<libgen.h>
DIRS char *basename(char *pathname); RETURNS:ptr to str #INCLUDES:<libgen.h>
FILE EVENTS int inotify_init(void); RETURNS:fd or -1(error) #INCLUDES:<sys/inotify.h>
FILE EVENTS int inotify_add_watch(int fd,const char *pathname,uint32_t mask); RETURNS:wdescriptor or -1(error) events[IN_ACCESS,IN_ATTRIB,IN_CLOSE_WRITE,IN_CLOSE_NOWRITE,IN_CREATE,IN_DELETE,IN_DELETE_SELF,IN_MODIFY_SELF,IN_MOVED_FROM,IN_MOVED_TO,IN_OPEN,IN_ALL_EVENTS,IN_MOVE,IN_CLOSE,IN_DONT_FOLLOW,IN_MASK_ADD,IN_ONESHOT,IN_ONLYDIR,IN_IGNORED,IN_ISDIR,IN_Q_OVERFLOW,IN_UNMOUNT]  #INCLUDES"<sys/inotify.h>
FILE EVENTS int inotify_rm_watch(int fd,int wd); RETURNS:0 or -1(error) #INCLUDES:<sys/inotify.h>
FILE EVENTS int read(int inotifyFd,char *buf,int buf_len); event=(struct inotify_event *) reads from fd returned from inotify_init, cast to ptr to struct inotify_event[int wd,uint32_t mask,uint32_t cookie,uint32_t len, char name[]] ;RETURNS nr of bytes read

SIGNALS int signals[SIGABRT-6,SIGALRM-14,SIGBUS-7,SIGCHLD-17,SIGCONT-18.SIGEMT-ud,SIGFPE-8,SIGHUP-1,SIGILL-4,SIGINT-2,SIGIO-29,SIGPOLL,SIGKILL-9,SIGPIPE-13,SIGPROF-27,SIGPWR-30,SIGQUIT-3,SIGSEGV-11,SIGSTKFLT-16,SIGSTOP-19,SIGSYS-31,SIGTERM-15,SIGTRAP-5,SIGTSTP-20,SIGTTIN-21,SIGTTOU-22,SIGURG-23,SIGUSR!-10,SIGUSR2-12,SIGVTALRM-26,SIGWINCH-28,SIGXCPU-24,SIGXFSZ-25
SIGNALS void(*signal(int sig,void (*handler)(int))) (int); RETURNS:pointer to function of the signal handler that is being changed to new handler or SIG_ERR(error) #INCLUDES:<signal.h>
SIGNALS int kill(pid_t pid,int sig); RETURNS:0 or -1(error) pid>0:sent to pid,pid==0:every porc in pids porocess group incl. pid,pid==-1: to all processes pid has permissions to send #INCLUDES:<signal.h>
SIGNALS int raise(int sig); RETURNS:0 or nonzero(error) #INCLUDES<signal.h>
SIGNALS killpg(pid_t pgrp,int sig); RETURNS:0 or -1(error) if pgrp=0: all processes in calling proc prgroup  #INCLUDES:<signal.h>
SIGNALS char *strsignal(int sig); RETURNS:ptr to signal desc string #INCLUDES:<string.h><signal.h>
SIGNALS void psignal(int sig,const char *msg); RETURNS:void #INCLUDES:<signal.h>
SIGNALS int sigemptyset(sigset_t *set); RETURNS:0 or -1(error) #INCLUDES:<signal.h>
SIGNALS int sigfillset(sigset_t *set); RETURNS:0 or -1(error) #INCLUDES:<signal.h>
SIGNALS int sigaddset(const sigset_t *set,int sig); RETURNS:0 or -1(error)  #INCLUDES:<signal.h>
SIGNALS int sigdelset(const sigset_t *set,int sig); RETURNS:0 or -1(error)  #INCLUDES:<signal.h>
SIGNALS int sigismember(const sigset_t *set,int sig); RETURNS: 1 if sig member of set,0 if not or -1(error) #INCLUDES:<signal.h>
SIGNALS int sigandset(sigset_t *dest,sigset_t *left,sigset_t *right); RETURNS: 0 or -1(error) #INCLUDES:<signal.h>
SIGNALS int sigorset(sigset_t *dest, sigset_t *left,sigset_t *right); RETURNS: 0 or -1(error) #INCLUDES:<signal.h>
SIGNALS int sigisemptyset(const sigset_t *set); RETURNS 1 if empty, or 0 #INCLUDES:<signal.h>
SIGNALS int sigprocmask(int how,const sigset_t *set,sigset_t *oldset); RETURNS 0 or -1(error) how[SIG_BLOCK,SIG_UNBLOCK,SIG_SETMASK]  #INCLUDES:<signal.h>
SIGNALS int sigpending(sigset_t *set); RETURNS 0 or -1(error) #INCLUDES:<signal.h>
SIGNALS int sigaction(int sig,const struct sigaction *act,struct sigaction *oldact); RETURNS:0 or -1(error) struct sigaction[void (*sa_handler)(int),sigset_t sa_mask,sa_flags...] #INCLUDES:<signal.h>
SIGNALS int pause(void); RETURNS -1,errno=EINTR #INCLUDES:<unistd.h>












	



  













