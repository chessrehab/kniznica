I/O FILE int open(const char *pathname, int flags, .../* mode_t mode */);  RETURNS: filedescriptor or -1(error) FLAGS: O_RDONLY,O_WRONLY,O_RDWR,O_CREAT,O_TRUNC,O_APPEND...   MODE:S_IRUSR,S_IWUSR,S_IRGRP,S_IWGRP,S_IROTH,S_IWOTH...#INCLUDES: <sys/stat.h> <fcntl.h>
I/O FILE int creat(const char *pathname, mode_t mode); RETURNS: filedescriptor or -1(error)  MODE:S_IRUSR,S_IWUSR,S_IRGRP,S_IWGRP,S_IROTH,S_IWOTH...#INCLUDES:<unistd.h>
I/O FILE ssize_t read(int fd, void *buffer,size_t count); RETURNS: nr of bytes read or 0(EOF) or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t write(int fd, const void *buffer, size_t count); RETURNS nr of bytes written or -1(error) #INCLUDES:<unistd.h>
I/O FILE int close(int fd); RETURNS 0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE off_t lseek(int fd, off_t offset, int whence); RETURNS:new offset or -1(error) WHENCE: SEEK_SET,SEEK_END,SEEK_CUR  #INCLUDES:<unistd.h>
I/O FILE int fcntl(int fd,int cmd,...); RETURNS:value dpnd on cmd or -1(error) CMD: F_GETFL,F_SETFL,F_DUPFD, FDUPFD_CLOEXEC #INCLUDES:<fcntl.h>
I/O FILE int dup(int oldfd); RETURNS:new fd or -1(error) #INCLUDES:<unistd.h>
I/O FILE int dup2(int oldfd,int newfd); RETURNS: newfd or -1(error) #INCLUDES:<unistd.h>
I/O FILE int dup3(int oldfd,int newfd,int flags); RETURNS: newfd or -1(error)
I/O FILE ssize_t pread(inf fd,void *buffer,size_t count,off_t offset); RETURNS: nr of bytes read or 0 on EOF or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t pwrite(int fd,const void *buffer,size_t count,off_t offset); RETURNS: nr of bytes written or 0 on EOF or -1(error) #INCLUDES:<unistd.h>
I/O FILE ssize_t readv(int fd,struct *iovec,int iovcnt); RETURNS:nr of bytes read or 0 (EOF) or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t writev(int fd,const struct *iovec,int iovcnt); RETURNS:nr of bytes written or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t preadv(int fd,struct *iovec,int iovcnt,off_t offset); RETURNS:nr of bytes or 0(EOF) or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE ssize_t pwritev(int fd,const struct *iovec,int iovcnt,off_t offset); RETURNS:nr of bytes written or -1(error) #INCLUDES:<sys/uio.h>
I/O FILE int truncate(const char *pathname,off_t length); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE int ftruncate(int fd,off_t length); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE int mkstemp(char *template); RETURNS: fd or -1(error) #INCLUDES:<stdlib.h>
PROCESS pid_t getpid(void); RETURNS:void #INCLUDES:<unistd.h>
PROCESS pid_t getppid(void) RETURNS:void #INCLUDES:<unistd.h>
PROCESS char *getenv(const char *name); RETURNS: pointer to value/string or NULL(no such var) #INCLUDES:<stdlib.h>
PROCESS extern char **environ; RETURNS: global variable -pointer to pointers to env. variables
PROCESS int putenv(char *string); RETURNS:0(success) or nonzero(error), string is name=value #INCLUDES:<stdlib.h>
PROCESS int setenv(const char *name,const char *value,int overwrite); RETURNS:0(success) or -1(error) #INCLUDES:<stdlib.h>
PROCESS int unsetenv(const char *name); RETURNS:0(succes) or -1(error) #INCLUDES:<stdlib.h>
PROCESS int clearenv(void); RETURNS:0(success) or nonzero(error), equal to environ=NULL; #INCLUDES:<stdlib.h>
PROCESS int setjmp(jmp_buf env); RETURNS:0 on initial call, nonzero on return via longjmp() #INCLUDES:<setjmp.h>
PROCESS void longjmp(jmp_buf env,int val); RETURNS:void returns to setjump with value val #INCLUDES:<setjmp.h>
MEMORY	int brk(void *end_data_segment); RETURNS:0(success) or -1(error) #INCLUDES:<unistd.h>
MEMORY void *sbrk(intptr_t increment); RETURNS:previous program break or (*void)-1 on error #INCLUDES:<unistd.h>
MEMORY void *malloc(size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY free(void *ptr); RETURNS:void #INCLUDES:<stdlib.h>
MEMORY void *calloc(size_t numitems,size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY void *realloc(void *ptr,size_t size); RETURNS:pointer to reallocated memory or NULL(error) #INCLUDES:<stdlib.h>
MEMORY void *memalign(size_t boundary,size_t size); RETURNS:pointer to allocated memory or NULL(error) #INCLUDES:<malloc.h>
MEMORY int posix_memalign(void **memptr,size_t alignment,size_t size); RETURNS: 0(success) or errnum(error) #INCLUDES:<stdlib.h>
MEMORY void *alloca(size_t size); RETURNS:pointer to allocated memory on the stack #INCLUDES:<alloca.h>
USERS struct passwd *getpwname(const char *name); RETURNS:pointer to structure passwd[pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell] or NULL(error) #INCLUDES:<pwd.h>
USERS struct passwd *getpwuid(uid_t uid); RETURNS:pointer to structure passwdd[pw_name,pw_passwd,pw_uid,pw_gid,pw_gecos,pw_dir,pw_shell] or NULL(error) #INCLUDES:<pwd.h>
USERS struct group *getgrnam(const char *name); RETURNS:pointer to struct group[gr_name,gr_passwd,gr_gid,**gr_mem] ot NULL(error) #INCLUDES:<grp.h>
USERS struct group *getgrgid(gid_t gid); RETURNS:pointer to struct group[gr_name,gr_passwd,gr_gid,**gr_mem] ot NULL(error) #INCLUDES:<grp.h>
USERS struct passwd *getpwent(void); RETURNS:pointer to structure passwd entry or NULL(error) #INCLUDES:<pwd.h>
USERS void setpwent(void); RETURNS:void -resets the entry point of getpwent() #INCLUDES:<pwd.h>
USERS void endpwent(void); RETURNS:void -ends the entry of getpwent()-closes down #INCLUDES:<pwd.h>
USERS struct group *getgrent(void); RETURNS:pointer to structure group entry or NULL(error) #INCLUDES:<grp.h>
USERS void setgrent(void); RETURNS:void -resets the entry point of getgrent() #INCLUDES:<grp.h>
USERS void endgrent(void); RETURNS:void -ends the entry of getgrent()-closes down #INCLUDES:<grp.h>
USERS struct spwd *getspnam(const char *name); RETURNS:pointer to structure spwd[sp_namp,sp_pwdp,sp_lstchg,sp_min,sp_max,sp_warn,sp_inact,sp_expire] #INCLUDES:<shadow.h>
USERS struct spwd *getspent(void); RETURNS:pointer to structure spwd entry or NULL(error) #INCLUDES:<shadow.h>
USERS void setspent(void); RETURNS:void -resets the entry point of getspent() #INCLUDES:<shadow.h>
USERS void endspent(void); RETURNS:void -ends the entry of getspent()-closes down #INCLUDES:<shadow.h>
USERS char *crypt(const char *key,const *char salt); RETURNS:pointer to encrtypted pwd or NULL(error) #INCLUDES:<unistd.h>
USERS char *getpass(const *char prompt); RETURNS:pointer to entered pwd or NULL(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT uid_t getuid(void); RETURNS:real user id of calling process #INCLUDES:<unistd.h>
PROCESS_CREDENT uid_t geteuid(void); RETURNS:effective user id of calling process#INCLUDES:<unistd.h>
PROCESS_CREDENT gid_t getgid(void); RETURNS:real group id of calling process #INCLUDES:<unistd.h>
PROCESS_CREDENT gid_t getegid(void); RETURNS: effective group id of a calling process #INCLUDES:<unistd.h>
PROCESS_CREDENT int setuid(uid_t uid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setgid(gid_t gid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int seteuid(uid_t euid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setegid(gid_t egid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setreuid(uid_t ruid,uid_t euid); RETURNS:0 on success or -1(error),args can be -1 for omit #INCLUDES:<unistd.h>
PROCESS_CREDENT int setregid(gid_t rgid,gid_t egid); RETURNS:0 on success or -1(error),args can be -1 for omit  #INCLUDES:<unistd.h>
PROCESS_CREDENT int getresuid(uid_t *ruid,uid_t *euid,uid_t *suid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int getresgid(gid_t *rgid,gid_t *egid,gid_t *sgid); RETURNS:0 on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setresuid(uid_t ruid,uid_t euid,uid_t suid); RETURNS:0 on success or -1(error),args can be -1 for omit  #INCLUDES:<unistd.h>
PROCESS_CREDENT int setresgid(gid_t rgid,gid_t egid,gid_t sgid); RETURNS:0 on success or -1(error),args can be -1 for omit  #INCLUDES:<unistd.h>
PROCESS_CREDENT int setfsuid(uid_t fsuid); RETURNS:previous fsuid #INCLUDES:<sys/fsuid.h>
PROCESS_CREDENT int setfsgid(gid_t fsgid); RETURNS:previous fsgid #INCLUDES:<sys/fsuid.h>
PROCESS_CREDENT int getgroups(int gidsetsize,gid_t grouplis[]); RETURNS: nr of group IDs placed in grouplist on success or -1(error) #INCLUDES:<unistd.h>
PROCESS_CREDENT int setgroups(size_t gidsetsize,const gid_t *grouplis); RETURNS:0 on success or -1(error) #INCLUDES:<grp.h>
PROCESS_CREDENT int initgroups(const char *user,gid_t group); RETURNS:0 on success or -1(error) #INCLUDES:<grp.h>
TIME int gettimeofday(struct timeval *tv,struct timezone *tz); RETURNS: 0 or -1(error) ,struct timeval:[time_t tv_sec(secs),suseconds_t tv_usec(micros)] #INCLUDES:<sys/time.h>
TIME time_t time(time_t *timep); RETURNS:number of seconds since Epoch or -1(error) ,usually use NULL as arg #INCLUDES:<time.h>
TIME char *ctime(const time_t *timep); RETURNS:pointer to string or NULL(error) #INCLUDES:<time.h>
TIME struct tm *gmtime(const time_t *timep); RETURNS:pointer to structure tm with broken down time attrs,struct tm:[tm_sec,tm_min,tm_hour,tm_mday,tm_mon,tm_year...etc] or NULL(error) #INCLUDES:<time.h>
TIME struct tm *localtime(const time_t *timep); RETURNS:pointer to structure tm with broken down time attrs or NULL(error) #INCLUDES:<time.h>
TIME time_t mktime(struct tm *timeptr); RETURNS: seconds since Epoch corr. to the struct in the attr or -1(error) #INCLUDES:<time.h>
TIME char *asctime(const struct tm *timeptr); RETURNS: pointer to preformatted string or NULL(error) #INCLUDES:<time.h>
TIME size_t strftime(char *outstr,size_t maxsize,const char *format,const struct tm *timeptr); RETURNS:nr of bytes placed in outstr or NULL(error) %c(all)%d(day)%F(ISO date)%m(month) %Y(YYYY)  #INCLUDES<time.h>
TIME char *strptime(const char *str,const char *format,struct tm *timeptr); RETURNS:ptr to next unprocessed char or NULL(error) #INCLUDES:<time.h>
TIME char *setlocale(int category,const char *locale); RETURNS:ptr to a string with new locale or NULL(error) #INCLUDES:<locale.h>
TIME int settimeoftheday(const struct timeval *tv,const struct timezone *tz); RETURNS: 0 or -1(error) #INCLUDES<sys/time.h>
TIME int adjtime(struct timeval *delta,struct timeval *olddelta); RETURNS:0 on success or -1(error) #INCLUDES:<sys/time.h>
TIME clock_t times(struct tms *buf); RETURNS:nr of clock ticks or -1(error),struct tms:[tms_utime,tms_stime,tms_cutime,tms_cstime] #INCLUDES:<sys/times.h>
TIME clock_t clock(void); RETURNS:total cpu time used by calling process or -1(error) #INCLUDES:<time.h>
SYSTEM long sysconf(int name); RETURNS value of limit or -1(error/indetermined) [_SC_ARG_MAX._SC_CLK_TCK,_SC_LOGIN_NAME_MAX,_SC_OPEN_MAX,_SC_NGROUPS_MAX,_SC_PAGE_SIZE,_SC_RTSIG_MAX,_SC_SIGQUEUE_MAX,_SC_STREAM_MAX] #INCLUDES:<unistd.h>
SYSTEM long pathconf(const char *pathname,int name); RETURNS:value of limit or -1(error/indetermined) [_PC_NAME_MAX,_PC_PATH_MAX,_PC_PIPE_BUF] #INCLUDES:<unistd.h>
SYSTEM long fpathconf(int fd,int name); RETURNS:value of limit or -1(error/indetermined) [_PC_NAME_MAX,_PC_PATH_MAX,_PC_PIPE_BUF]  #INCLUDES:<unistd.h>
SYSTEM int uname(struct utsname *utsbuf): RETURNS:0 or -1(error) struct[ chars *sysname,nodename,release,version,machine,domainname] #INCLUDES:<sys/utsname.h>
I/O FILE BUFFERING int setvbuf(FILE *stream,char *buf,int mode,size_t size); RETURNS: 0 or nonzero(error) mode[_IONBF,_IOLBF,_IOFBF]  #INCLUDES:<stdio.h>
I/O FILE BUFFERING void setbuf(FILE *stream,char *buf); RETURNS:void  #INCLUDES:<stdio.h>
I/O FILE BUFFERING void setbuffer(FILE *stream,char *buf,size_t size); RETURNS:void #INCLUDES:<stdio.h>
I/O FILE BUFFERING inf fflush(FILE *stream); RETURNS: 0 or EOF(error) #INCLUDES:<stdio.h>
I/O FILE BUFFERING int fsync(int fd); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE BUFFERING int fdatasync(int fd); RETURNS:0 or -1(error) #INCLUDES:<unistd.h>
I/O FILE BUFFERING void sync(void); RETURNS:void #INCLUDES:<unistd.h>
I/O FILE BUFFERING int posix_fadvise(int fd,off_t offset,off_t len,int advice); RETURNS:0 or positive nr(error) advice[POSIX_FADV_NORMAL,POSIX_FADV_SEQUENTIAL,POSIX_FADV_RANDOM,POSIX_FADV_WILLNEED,POSIX_FADV_DONTNEED,POSIX_FADV_NOREUSE] #INCLUDES:<fcntl.h>
I/O FILE BUFFERING int fileno(FILE *stream); RETURNS: fd or -1(error) #INCLUDES:<stdio.h>
I/O FILE BUFFERING FILE *fdopen(int fd,const char *mode); RETURNS:new file ptr or NULL(error) #INCLUDES:<stdio.h>


	



  













